openapi: 3.0.1
info:
  title: OQTOPUS Cloud Admin API
  version: '1.0'
  contact:
    name: oqtopus-team
    email: oqtopus-team[at]googlegroups.com
  description: OQTOPUS Cloud Admin API. This API is used to interact with the OQTOPUS Cloud service. The API provides endpoints to manage devices, jobs, and results.
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: http://localhost:8080
    description: Local server url
paths:
  /users:
    get:
      tags:
        - user
      summary: get users
      description: get users
      operationId: get_users
      security:
        - BearerAuth: []
      parameters:
        - name: offset
          in: query
          description: offset information
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: Limit information
          required: false
          schema:
            type: string
        - name: email
          in: query
          description: query email infomation
          required: false
          schema:
            type: string
        - name: name
          in: query
          description: query name information
          required: false
          schema:
            type: string
        - name: organization
          in: query
          description: query organization information
          required: false
          schema:
            type: string
        - name: status
          in: query
          description: query user status
          required: false
          schema:
            $ref: '#/components/schemas/users.UserStatus'
        - name: group_id
          in: query
          description: query group ID
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users.GetUsersResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error.BadRequestError'
              example:
                message: Invalid status
        '401':
          description: Unauthorized
        '403':
          description: 'Not authorized : user is not admin'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error.InternalServerError'
              example:
                message: Internal Server Error
  /users/{user_id}:
    get:
      tags:
        - user
      summary: get one user
      description: get one user
      operationId: get_one_user_by_id
      security:
        - BearerAuth: []
      parameters:
        - name: user_id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users.GetOneUserResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error.NotFoundError'
              example:
                message: User not found
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error.InternalServerError'
              example:
                message: Internal Server Error
    patch:
      tags:
        - user
      summary: update user status
      description: update user status
      operationId: updatet_user_status_by_id
      security:
        - BearerAuth: []
      parameters:
        - name: user_id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/users.UpdateUserRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users.GetOneUserResponse'
        '401':
          description: Unauthorized
        '403':
          description: Not authorized
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error.NotFoundError'
              example:
                message: User not found
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error.InternalServerError'
              example:
                message: Internal Server Error
    delete:
      tags:
        - user
      summary: delete user
      description: delete user with designated id
      operationId: delete_user_by_id
      security:
        - BearerAuth: []
      parameters:
        - name: user_id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Success
        '401':
          description: Unauthorized
        '403':
          description: Not authorized
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error.NotFoundError'
              example:
                message: User not found
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error.InternalServerError'
              example:
                message: Internal Server Error
  /whitelist_users:
    get:
      tags:
        - WhitelistUsers
      summary: List whitelist users
      description: List whitelist users
      operationId: list_whitelist_users
      security:
        - BearerAuth: []
      parameters:
        - name: offset
          in: query
          description: offset information
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: Limit information
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Return a list of whitelist users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/whitelist_users.ListWhitelistUsersResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error.BadRequestError'
        '401':
          description: Unauthorized
        '403':
          description: 'Not authorized : user is not admin'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error.InternalServerError'
    post:
      tags:
        - WhitelistUsers
      summary: register a user to the whitelist
      description: register a user to the whitelist
      operationId: register_whitelist_user
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/whitelist_users.RegisterWhitelistUsersRequest'
      responses:
        '200':
          description: Success register a user to the whitelist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/success.SuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error.BadRequestError'
        '401':
          description: Unauthorized
        '403':
          description: 'Not authorized : user is not admin'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error.InternalServerError'
    delete:
      tags:
        - WhitelistUsers
      summary: delete a user from the whitelist
      description: delete a user from the whitelist
      operationId: delete_whitelist_user
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/whitelist_users.WhitelistUsersDeleteRequest'
      responses:
        '204':
          description: Delete success
        '401':
          description: Unauthorized
        '403':
          description: 'Not authorized : user is not admin'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error.InternalServerError'
  /devices:
    get:
      tags:
        - devices
      summary: List available devices
      description: List available devices
      operationId: list_devices
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Returns a list of available devices
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/devices.DeviceInfo'
        '401':
          description: Unauthorized
        '403':
          description: Not authorized
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error.InternalServerError'
    post:
      tags:
        - devices
      summary: Register a new device
      description: Register a new device to the system.
      operationId: register_device
      security:
        - BearerAuth: []
      requestBody:
        description: Device data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/devices.DeviceBase'
      responses:
        '200':
          description: Device registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/success.SuccessResponse'
              example:
                message: Device registered
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error.BadRequestError'
              example:
                message: Bad request malformed input data
        '401':
          description: Unauthorized
        '403':
          description: Not authorized
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error.InternalServerError'
  /devices/{device_id}:
    get:
      tags:
        - devices
      summary: Get specified device details
      description: get device
      operationId: get_device
      security:
        - BearerAuth: []
      parameters:
        - name: device_id
          in: path
          description: Device identifier
          required: true
          schema:
            type: string
          example: Kawasaki
      responses:
        '200':
          description: device response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/devices.DeviceInfo'
        '404':
          description: Device with device_id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error.NotFoundError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error.InternalServerError'
    patch:
      tags:
        - devices
      summary: Update data of selected device
      description: Update the properties of selected device.
      operationId: update_device_data
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: device_id
          description: Device ID
          required: true
          schema:
            type: string
            example: Kawasaki
      requestBody:
        description: New calibration data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/devices.DeviceBase'
      responses:
        '200':
          description: Device's data updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/success.SuccessResponse'
              example:
                message: Device's data updated
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error.BadRequestError'
              example:
                message: Bad request malformed input data
        '401':
          description: Unauthorized
        '403':
          description: Not authorized
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error.NotFoundError'
              example:
                message: Device not found
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error.InternalServerError'
              example:
                message: Internal server error
    delete:
      tags:
        - devices
      summary: Delete a device
      description: Delete a device from the system.
      operationId: delete_device
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: device_id
          description: Device ID
          required: true
          schema:
            type: string
            example: Kawasaki
      responses:
        '204':
          description: Device deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/success.SuccessResponse'
              example:
                message: Device deleted
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error.BadRequestError'
              example:
                message: Bad request malformed input data
        '401':
          description: Unauthorized
        '403':
          description: Not authorized
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error.NotFoundError'
              example:
                message: Device not found
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error.InternalServerError'
  /announcements:
    get:
      tags:
        - Announcements
      summary: Get announcements list from backend
      description: Get announcements list from backend
      operationId: get_announcements_list
      security:
        - BearerAuth: []
      parameters:
        - name: offset
          in: query
          description: offset information
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: Limit information
          required: false
          schema:
            type: string
        - name: order
          in: query
          description: Specify order according to start time
          required: false
          schema:
            type: string
            enum:
              - DESC
              - ASC
            default: ASC
        - name: current_time
          in: query
          description: Allows to filter the list of announcements to fetch by provided time. If specified only announcements with start_time <= current_time and end_time >= current_time are returned.
          required: false
          schema:
            type: string
            format: date-time
            example: '2022-10-19T11:45:34Z'
      responses:
        '200':
          description: Return announcements
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/announcements.GetAnnouncementsListResponse'
        '401':
          description: Unauthorized
        '403':
          description: 'Not authorized : user is not admin'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error.InternalServerError'
    post:
      tags:
        - Announcements
      summary: Register announcement to backend
      description: Register announcement to backend
      operationId: announcement
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/announcements.RegisterAnnouncementRequest'
      responses:
        '200':
          description: Success register announcement
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/success.SuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error.BadRequestError'
        '401':
          description: Unauthorized
        '403':
          description: 'Not authorized : user is not admin'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error.InternalServerError'
  /announcements/{announcement_id}:
    get:
      tags:
        - Announcements
      summary: Get selected announcement
      description: Get selected announcement
      operationId: get_announcement
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: announcement_id
          description: announcement ID
          required: true
          schema:
            type: integer
            example: 0
      responses:
        '200':
          description: Return selected announcement
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/announcements.GetAnnouncementResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error.BadRequestError'
              example:
                message: Bad request malformed input data
        '401':
          description: Unauthorized
        '403':
          description: Not authorized
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error.NotFoundError'
              example:
                message: Announcement not found
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error.InternalServerError'
              example:
                message: Internal server error
    patch:
      tags:
        - Announcements
      summary: Update data of selected announcement
      description: Update the properties of selected announcement.
      operationId: update_announcement
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: announcement_id
          description: announcement ID
          required: true
          schema:
            type: integer
            example: 0
      requestBody:
        description: New announcement data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/announcements.UpdateAnnouncementRequest'
      responses:
        '200':
          description: Announcement data updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/success.SuccessResponse'
              example:
                message: Announcement data updated
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error.BadRequestError'
              example:
                message: Bad request malformed input data
        '401':
          description: Unauthorized
        '403':
          description: Not authorized
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error.NotFoundError'
              example:
                message: Announcement not found
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error.InternalServerError'
              example:
                message: Internal server error
    delete:
      tags:
        - Announcements
      summary: Delete announcement
      description: Delete announcement
      operationId: delete_announcement
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: announcement_id
          description: announcement ID
          required: true
          schema:
            type: integer
            example: 0
      responses:
        '204':
          description: Announcement deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/success.SuccessResponse'
              example:
                message: Announcement deleted
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error.BadRequestError'
              example:
                message: Bad request malformed input data
        '401':
          description: Unauthorized
        '403':
          description: Not authorized
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error.NotFoundError'
              example:
                message: Announcement not found
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error.InternalServerError'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    users.UserStatus:
      type: string
      enum:
        - approved
        - unapproved
        - suspended
      example: approved
    users.GetOneUserResponse:
      description: detail of users response
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        name:
          type: string
        organization:
          type: string
        status:
          $ref: '#/components/schemas/users.UserStatus'
        group_id:
          type: string
        available_devices:
          oneOf:
            - type: array
              items:
                type: string
            - type: string
              enum:
                - '*'
      xml:
        name: User
      required:
        - id
    users.GetUsersResponse:
      properties:
        offset:
          type: string
        limit:
          type: string
        users:
          type: array
          items:
            $ref: '#/components/schemas/users.GetOneUserResponse'
    error.BadRequestError:
      type: object
      properties:
        message:
          type: string
      required:
        - message
    error.InternalServerError:
      type: object
      properties:
        message:
          type: string
      required:
        - message
    error.NotFoundError:
      type: object
      properties:
        message:
          type: string
      required:
        - message
    users.UpdateUserRequest:
      type: object
      properties:
        email:
          type: string
        name:
          type: string
        organization:
          type: string
        status:
          $ref: '#/components/schemas/users.UserStatus'
        group_id:
          type: string
        available_devices:
          oneOf:
            - type: array
              items:
                type: string
            - type: string
              enum:
                - '*'
    whitelist_users.Email:
      type: string
      example: example@example.com
    whitelist_users.ListWhitelistUserResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        group_id:
          type: string
          example: group1
        email:
          $ref: '#/components/schemas/whitelist_users.Email'
        username:
          type: string
          example: exampleuser
        organization:
          type: string
          example: Example Organization
        is_signup_completed:
          type: boolean
          example: true
        available_devices:
          oneOf:
            - type: array
              items:
                type: string
            - type: string
              enum:
                - '*'
      required:
        - id
        - group_id
        - email
      example:
        id: 1
        group_id: group1
        email: example@example.com
        username: exampleuser
        organization: Example Organization
        is_signup_completed: true
    whitelist_users.ListWhitelistUsersResponse:
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/whitelist_users.ListWhitelistUserResponse'
    whitelist_users.RegisterWhitelistUserRequest:
      description: Whitelist user register request
      type: object
      properties:
        group_id:
          type: string
        email:
          type: string
        username:
          type: string
        organization:
          type: string
        available_devices:
          oneOf:
            - type: array
              items:
                type: string
            - type: string
              enum:
                - '*'
    whitelist_users.RegisterWhitelistUsersRequest:
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/whitelist_users.RegisterWhitelistUserRequest'
    success.SuccessResponse:
      type: object
      properties:
        message:
          type: string
      required:
        - message
    whitelist_users.WhitelistUsersDeleteRequest:
      properties:
        user_emails:
          type: array
          items:
            $ref: '#/components/schemas/whitelist_users.Email'
    devices.DeviceInfo:
      type: object
      properties:
        device_id:
          type: string
          example: SVSim
        device_type:
          type: string
          enum:
            - QPU
            - simulator
          example: simulator
        status:
          type: string
          enum:
            - available
            - unavailable
          example: available
        available_at:
          description: Parameter mandatory and valid for 'unavailable' devices
          type: string
          format: date-time
          example: '2022-10-19T11:45:34+00:00'
        n_pending_jobs:
          type: integer
          example: 8
        n_qubits:
          type: integer
          example: 64
        basis_gates:
          type: array
          items:
            type: string
          example:
            - x
            - 'y'
            - z
            - h
            - s
            - sdg
            - t
            - tdg
            - rx
            - ry
            - rz
            - cx
            - cz
            - swap
            - u1
            - u2
            - u3
            - u
            - p
            - id
            - sx
            - sxdg
        supported_instructions:
          type: array
          items:
            type: string
          example:
            - measure
            - barrier
            - reset
        device_info:
          description: json format calibration_data and n_nodes etc
          type: string
        calibrated_at:
          description: Parameter available only for `QPU` devices with available calibration data
          type: string
          format: date-time
          example: '2022-10-19T11:45:34+00:00'
        description:
          type: string
          example: State vector-based quantum circuit simulator
      required:
        - device_id
        - device_type
        - status
        - n_pending_jobs
        - basis_gates
        - supported_instructions
        - description
      example:
        - device_id: SVSim
          device_type: simulator
          status: available
          n_pending_jobs: 8
          n_qubits: 39
          n_nodes: 512
          basis_gates:
            - x
            - 'y'
            - z
            - h
            - s
            - sdg
            - t
            - tdg
            - rx
            - ry
            - rz
            - cx
            - cz
            - swap
            - u1
            - u2
            - u3
            - u
            - p
            - id
            - sx
            - sxdg
          supported_instructions:
            - measure
            - barrier
            - reset
          device_info: |-
            {
              "n_nodes": 512,
              "calibration_data": {
                "qubit_connectivity": [ "(1,4)", "(4,5)", "(5,8)"],
                "t1": {
                  "0": 55.51,
                  "1": 37.03,
                  "2": 57.13
                }
              }
            }
          calibrated_at: '2022-10-19T11:45:34'
          description: State vector-based quantum circuit simulator
    devices.DeviceBase:
      type: object
      properties:
        device_info:
          type: string
          example: '{"device_id": "Kawasaki", "qubits": []}'
        device_type:
          type: string
          enum:
            - QPU
            - simulator
          example: simulator
        status:
          type: string
          enum:
            - available
            - unavailable
          example: available
        n_qubits:
          type: integer
          example: 64
        available_at:
          type: string
          format: date-time
          example: '2022-10-19T11:45:34+00:00'
        calibrated_at:
          type: string
          format: date-time
          example: '2022-10-19T11:45:34+00:00'
        basis_gates:
          type: array
          items:
            type: string
          example:
            - x
            - 'y'
            - z
            - h
            - s
            - sdg
            - t
            - tdg
            - rx
            - ry
            - rz
            - cx
            - cz
            - swap
            - u1
            - u2
            - u3
            - u
            - p
            - id
            - sx
            - sxdg
        supported_instructions:
          type: array
          items:
            type: string
          example:
            - measure
            - barrier
            - reset
        description:
          type: string
          example: Superconducting quantum computer
    announcements.GetAnnouncementResponse:
      type: object
      properties:
        id:
          type: integer
          example: 0
        title:
          type: string
          example: Example Title
        content:
          type: string
          example: Example Content
        start_time:
          type: string
          format: date-time
          example: '2022-10-19T11:45:34+09:00'
        end_time:
          type: string
          format: date-time
          example: '2022-12-19T11:45:34+09:00'
        publishable:
          type: boolean
          example: true
        updated_at:
          type: string
          format: date-time
          example: '2022-12-19T11:45:34+09:00'
      required:
        - id
        - title
        - content
        - start_time
        - end_time
        - publishable
        - updated_at
      example:
        id: 0
        title: Example Title
        content: Example Content
        start_time: '2022-10-19T11:45:34+09:00'
        end_time: '2022-12-19T11:45:34+09:00'
        publishable: true
    announcements.GetAnnouncementsListResponse:
      properties:
        announcements:
          type: array
          items:
            $ref: '#/components/schemas/announcements.GetAnnouncementResponse'
    announcements.RegisterAnnouncementRequest:
      description: register announcement to backend
      type: object
      properties:
        title:
          type: string
        content:
          type: string
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        publishable:
          type: boolean
      required:
        - title
        - content
        - start_time
        - end_time
        - publishable
    announcements.UpdateAnnouncementRequest:
      description: update announcement
      type: object
      properties:
        title:
          type: string
        content:
          type: string
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        publishable:
          type: boolean
